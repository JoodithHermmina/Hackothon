# Chat Summary: AWS IAM Policy Update for Secrets Manager

## Initial Context
- Project: Resume Builder application using AWS infrastructure
- CI/CD: GitHub Actions workflow for continuous deployment
- Authentication: Using OIDC (OpenID Connect) for GitHub Actions to AWS authentication
- Infrastructure: ECS, ECR, and Secrets Manager for container deployments

## Migration and Infrastructure Evolution
- **Initial Architecture**: Started with a traditional IAM user-based authentication for CI/CD
- **Migration Goal**: Move to OIDC-based authentication for enhanced security and reduced credential management
- **Infrastructure as Code**: Using Terraform to manage AWS resources and configurations
- **Migration Strategy**: 
  1. Create OIDC provider in AWS IAM
  2. Define trust relationship between GitHub Actions and AWS
  3. Configure appropriate IAM policies for GitHub Actions role
  4. Update CI/CD workflows to use OIDC authentication

## Problem Progression and Solution Evolution

### Phase 1: Task Definition Issues
- **Initial Problem**: ECS task definitions existed in AWS but couldn't be found during CI/CD verification
- **Error Observed**: Task definitions for frontend and backend services (revision 7) couldn't be found:
  - `resume-backend-task:7`
  - `resume-frontend-task:7`
- **Root Cause Analysis**: Workflow was using AWS CLI commands to verify task definitions with incompatible ARN formats
- **Solution Applied**: 
  1. Modified ARN handling in verification steps
  2. Added fallback approaches to check for active task definitions
  3. Extracted family and revision from full ARNs for proper matching
  4. Improved error handling and reporting

### Phase 2: Secrets Manager Permission Issue
- **Subsequent Problem**: After fixing task definition issues, encountered Secrets Manager permission error
- **Error Observed**: `AccessDeniedException: User: arn:aws:sts::***:assumed-role/github-actions-oidc-role/GitHubActions is not authorized to perform: secretsmanager:CreateSecret`
- **Diagnostic Approach**:
  1. Analyzed the error message to identify the specific missing permission
  2. Traced the error to the GitHub Actions workflow attempting to create a secret
  3. Examined the IAM policy attached to the OIDC role
  4. Confirmed the role had permission to read secrets but not create them
- **Solution Implementation**:
  1. Updated the IAM policy to include the missing permission
  2. Applied the policy change using automation script
  3. Verified the policy was successfully updated in AWS

## Problem Statement
- GitHub Actions CI/CD pipeline was failing with an IAM permissions error
- Error encountered: `AccessDeniedException: User: arn:aws:sts::***:assumed-role/github-actions-oidc-role/GitHubActions is not authorized to perform: secretsmanager:CreateSecret on resource: resume-builder/dev/app-secrets`
- Previous discussion had focused on ECS task definition issues, but this new error related to AWS Secrets Manager permissions

## Analysis Process
1. Identified the specific error was related to AWS Secrets Manager permissions
2. Determined that the GitHub Actions role (`github-actions-oidc-role`) was missing the necessary permission
3. Searched the codebase for IAM policy definitions using semantic search
4. Located the relevant IAM policy file at `iam/github-actions-role-policy.json`
5. Confirmed that policy only had `secretsmanager:GetSecretValue` permission, not `secretsmanager:CreateSecret`

## Solution Design
1. Add the missing `secretsmanager:CreateSecret` permission to the IAM policy
2. Apply the updated policy to AWS using the existing automation script
3. Trigger the pipeline to verify the fix

## Step-by-Step Troubleshooting Process
1. **Identified Error Pattern**: Recognized specific permission error in GitHub Actions logs
2. **Isolated Environment**: Confirmed error was occurring in GitHub Actions workflow using OIDC authentication
3. **Reviewed Roles and Permissions**:
   - Examined IAM role used by GitHub Actions (`github-actions-oidc-role`)
   - Analyzed attached policy to identify permission gaps
4. **Root Cause Confirmation**:
   - Verified workflow was attempting to create secrets in AWS Secrets Manager
   - Confirmed role policy was missing the required permission
5. **Incremental Solution Development**:
   - Started with minimal policy change (adding single permission)
   - Decided against broader permissions to maintain principle of least privilege
6. **Testing Strategy**:
   - Applied policy change first
   - Triggered CI/CD pipeline to verify fix
   - Planned for monitoring actual workflow execution

## Implementation Steps
1. Modified the IAM policy file:
   - Edited `iam/github-actions-role-policy.json` to include the missing permission
   - The Secrets Manager section was updated from:
   ```json
   {
       "Effect": "Allow",
       "Action": [
           "secretsmanager:GetSecretValue"
       ],
       "Resource": "arn:aws:secretsmanager:${AWS_REGION}:${AWS_ACCOUNT_ID}:secret:${APP_NAME}/${ENVIRONMENT}/app-secrets*"
   }
   ```
   - To include the additional permission:
   ```json
   {
       "Effect": "Allow",
       "Action": [
           "secretsmanager:GetSecretValue",
           "secretsmanager:CreateSecret"
       ],
       "Resource": "arn:aws:secretsmanager:${AWS_REGION}:${AWS_ACCOUNT_ID}:secret:${APP_NAME}/${ENVIRONMENT}/app-secrets*"
   }
   ```

2. Applied the updated policy to AWS:
   - Used the existing script: `scripts/create-iam-policy.sh`
   - Command executed: `chmod +x scripts/create-iam-policy.sh && AWS_REGION=ap-south-1 AWS_ACCOUNT_ID=565393046834 APP_NAME=resume-builder ENVIRONMENT=dev TF_STATE_BUCKET=resume-builder-tf-state ECR_REPO_BACKEND=resume-backend ECR_REPO_FRONTEND=resume-frontend ./scripts/create-iam-policy.sh --apply`
   - Script successfully created the policy in AWS with the updated permissions
   - Confirmed success with the output message: "Policy created successfully"

3. Triggered the CI/CD pipeline:
   - Committed the updated IAM policy file to git
   - Used command: `git add iam/github-actions-role-policy.json && git commit -m "feat: add CreateSecret permission to GitHub Actions role" && git push origin main`
   - Push to `main` branch automatically triggered the GitHub Actions workflow

## Technical Details
- **AWS IAM Role**: github-actions-oidc-role
- **AWS Account ID**: 565393046834
- **AWS Region**: ap-south-1
- **Application Name**: resume-builder
- **Environment**: dev
- **IAM Policy Path**: iam/github-actions-role-policy.json
- **GitHub Repository**: JoodithHermmina/Hackothon

## Expected Outcome
- The GitHub Actions workflow should now be able to create secrets in AWS Secrets Manager
- The AccessDeniedException error should be resolved
- CI/CD pipeline should complete successfully

## Lessons Learned
- **Incremental Migration**: When migrating authentication methods (IAM user to OIDC), validate all required permissions
- **Error Analysis**: Parse error messages carefully to identify exact missing permissions
- **Principle of Least Privilege**: Add only the specific permissions needed rather than broader access
- **Automation**: Use scripts to apply IAM policy changes consistently
- **Documentation**: Keep policy changes documented for future reference

## Next Steps
- Monitor the GitHub Actions workflow to verify that the error is resolved
- Verify that the secret is created successfully in AWS Secrets Manager
- Consider adding similar permissions for other Secrets Manager operations if needed (e.g., UpdateSecret, DeleteSecret)
- Document the changes in project documentation for future reference
- Review other IAM permissions to ensure they're complete for all required operations 