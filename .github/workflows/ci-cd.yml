name: CI/CD Pipeline

on:
  push:
    branches: [ main, clean-branch ]
  pull_request:
    branches: [ main, clean-branch ]
  workflow_dispatch:

jobs:
  test:
    name: Test Applications
    runs-on: ubuntu-latest
    steps:
    - name: Check out the repo
      uses: actions/checkout@v3
      
    - name: Set up Python for backend tests
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install LaTeX dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y texlive-latex-base texlive-fonts-recommended texlive-fonts-extra texlive-latex-extra
        
    - name: Install backend dependencies
      run: |
        cd Resume-Backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
      
    - name: Run backend tests
      run: |
        cd Resume-Backend
        # Create necessary directories for tests
        mkdir -p templates static
        cp templates/twks_resume_template.tex templates/ || true
        cp company_logo.png templates/ || true
        pytest tests/ --cov=.
        
    - name: Set up Node.js for frontend tests
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    - name: Install frontend dependencies
      run: |
        cd resume-frontend
        npm install --legacy-peer-deps
        
    - name: Run frontend tests
      run: |
        cd resume-frontend
        CI=true npm test -- --passWithNoTests
      
  build_and_push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/clean-branch' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Check out the repo
      uses: actions/checkout@v3
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
    - name: Build and push backend image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: resume-backend
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd Resume-Backend
        # Add production environment variables to the build
        docker build \
          --build-arg FLASK_ENV=production \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
    - name: Build and push frontend image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: resume-frontend
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd resume-frontend
        # Build with production API URL
        docker build \
          --build-arg REACT_APP_API_URL=http://${{ secrets.APP_DOMAIN }}/api \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
  terraform:
    name: Deploy with Terraform
    runs-on: ubuntu-latest
    needs: build_and_push
    if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/clean-branch') && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    
    steps:
    - name: Check out the repo
      uses: actions/checkout@v3
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.7
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: Create S3 bucket for Terraform state if not exists
      run: |
        aws s3api head-bucket --bucket resume-builder-tf-state 2>/dev/null || \
        aws s3 mb s3://resume-builder-tf-state --region ${{ secrets.AWS_REGION }}
        
    - name: Terraform Init
      run: |
        cd terraform
        terraform init
        
    - name: Terraform Plan
      run: |
        cd terraform
        terraform plan -var "image_tag=${{ github.sha }}" -var "aws_region=${{ secrets.AWS_REGION }}"
      
    - name: Terraform Apply
      run: |
        cd terraform
        terraform apply -auto-approve -var "image_tag=${{ github.sha }}" -var "aws_region=${{ secrets.AWS_REGION }}"
        
    - name: Get Application URL
      run: |
        cd terraform
        echo "Application URL: $(terraform output -raw load_balancer_dns)"
        
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: terraform
    if: always()
    
    steps:
    - name: Send notification on success
      if: ${{ needs.terraform.result == 'success' }}
      run: |
        echo "Deployment succeeded! Application is now available."
        
    - name: Send notification on failure
      if: ${{ needs.terraform.result != 'success' }}
      run: |
        echo "Deployment failed. Please check the GitHub Actions logs." 