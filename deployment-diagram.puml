@startuml ThoughtWorks Resume Builder Deployment Architecture

' Define styles
skinparam componentStyle uml2
skinparam backgroundColor white
skinparam defaultFontSize 12
skinparam defaultFontColor #333333
skinparam linetype ortho
skinparam packageStyle rectangle
skinparam arrow {
  color #666666
  thickness 1
}
skinparam node {
  borderColor #888888
  backgroundColor #FEFEFE
}

'-------------------------- TITLE --------------------------

title ThoughtWorks Resume Builder - Deployment Architecture

'-------------------------- DEPLOYMENT NODES --------------------------

' Define the deployment nodes

' Developer environment
node "Developer Environment" as DevEnvironment {
  artifact "Source Code" as SourceCode
  component "Pre-commit Hooks" as PreCommitHooks
  component "Local Dev Server" as LocalDev
  component "Unit Tests" as UnitTests
  database "Local Database" as LocalDB
}

' CI/CD Pipeline
node "GitHub" as GitHubNode {
  component "Git Repository" as GitRepo
  component "GitHub Actions" as GitHubActions {
    component "Test Workflow" as TestWorkflow
    component "Build Workflow" as BuildWorkflow
    component "Deploy Workflow" as DeployWorkflow
  }
  component "Source Code Security Scan" as SecurityScan
}

' Build and artifact storage
node "Build & Artifact System" as BuildSystemNode {
  artifact "Docker Images" as DockerImages {
    artifact "Frontend Image" as FrontendImage
    artifact "Backend Image" as BackendImage
    artifact "Nginx Image" as NginxImage
  }
  artifact "Test Reports" as TestReports
  artifact "Code Coverage" as CodeCoverage
  component "Artifact Registry" as ArtifactRegistry
}

' AWS Cloud environment
cloud "AWS Cloud" as AWSCloudNode {
  node "Route 53" as Route53 {
    component "DNS Records" as DNSRecords
  }

  node "VPC" as VPC {
    node "Public Subnet" as PublicSubnet {
      component "Application Load Balancer" as ALB
      component "NAT Gateway" as NAT
    }

    node "Private Subnet" as PrivateSubnet {
      node "EC2 Instance Cluster" as EC2Cluster {
        node "EC2 Instance 1" as EC2Instance1 {
          component "Docker Compose" as DockerCompose1 {
            component "Frontend Container" as FrontendContainer1
            component "Backend Container" as BackendContainer1
            component "Nginx Container" as NginxContainer1
          }
        }
        node "EC2 Instance 2" as EC2Instance2 {
          component "Docker Compose" as DockerCompose2 {
            component "Frontend Container" as FrontendContainer2
            component "Backend Container" as BackendContainer2
            component "Nginx Container" as NginxContainer2
          }
        }
      }
      component "Security Group" as SecurityGroup
    }
  }

  node "S3" as S3 {
    artifact "Static Assets" as StaticAssets
    artifact "Resume Templates" as Templates
    artifact "Access Logs" as AccessLogs
  }

  node "CloudFront" as CloudFront {
    component "CDN Distribution" as CDNDist
    component "Cache Policies" as CachePolicies
  }

  node "CloudWatch" as CloudWatch {
    component "Logs" as Logs
    component "Metrics" as Metrics
    component "Alarms" as Alarms
    component "Dashboards" as Dashboards
  }

  node "AWS Certificate Manager" as ACM {
    artifact "SSL Certificate" as SSLCert
  }

  node "IAM" as IAM {
    component "Service Roles" as ServiceRoles
    component "Policies" as Policies
  }
}

' External User
actor "End User" as EndUser

'-------------------------- DEPLOYMENT PROCESS --------------------------

' Developer workflow
SourceCode --> PreCommitHooks : triggers
PreCommitHooks --> UnitTests : runs
PreCommitHooks --> LocalDev : on pass
LocalDev --> LocalDB : uses for development

' CI/CD workflow
SourceCode --> GitRepo : git push
GitRepo --> SecurityScan : triggers
SecurityScan --> TestWorkflow : on pass
TestWorkflow --> BuildWorkflow : on success
BuildWorkflow --> DockerImages : creates
BuildWorkflow --> TestReports : generates
BuildWorkflow --> CodeCoverage : generates
DockerImages --> ArtifactRegistry : stores
TestWorkflow --> DeployWorkflow : on success
DeployWorkflow --> EC2Cluster : deploys to

' Infrastructure connections
ArtifactRegistry --> EC2Cluster : pulls images
ALB --> NginxContainer1 : routes traffic
ALB --> NginxContainer2 : routes traffic
NginxContainer1 --> FrontendContainer1 : serves frontend
NginxContainer1 --> BackendContainer1 : proxies API requests
NginxContainer2 --> FrontendContainer2 : serves frontend
NginxContainer2 --> BackendContainer2 : proxies API requests
BackendContainer1 --> Templates : uses for PDF generation
BackendContainer2 --> Templates : uses for PDF generation
SecurityGroup --> EC2Cluster : protects
PrivateSubnet --> NAT : outbound traffic
FrontendContainer1 --> StaticAssets : loads assets
FrontendContainer2 --> StaticAssets : loads assets
CloudFront --> StaticAssets : caches & serves
CloudFront --> CachePolicies : uses
CloudFront --> SSLCert : uses for HTTPS
ALB --> SSLCert : uses for HTTPS
EC2Cluster --> Logs : sends application logs
ALB --> AccessLogs : stores access logs
CloudFront --> AccessLogs : stores access logs
CloudWatch --> Metrics : collects from services
Metrics --> Alarms : triggers on thresholds
Alarms --> Dashboards : displayed in
DNSRecords --> ALB : points to
DNSRecords --> CloudFront : points to
IAM --> ServiceRoles : defines
ServiceRoles --> EC2Cluster : grants permissions
ServiceRoles --> S3 : controls access

' User interaction
EndUser --> Route53 : DNS resolution
EndUser --> ALB : accesses application API
EndUser --> CloudFront : requests static assets

'-------------------------- DEPLOYMENT ZONES --------------------------

' Define deployment zones using rectangles with dashed borders
rectangle "Development Zone" #LightGreen {
  component "Development Environment" as DevZone
}

rectangle "CI/CD Pipeline" #LightBlue {
  component "GitHub CI/CD" as GitHubCI
  component "Build System" as BuildSys
}

rectangle "Production Environment" #LightPink {
  component "AWS Infrastructure" as AWSInfra
}

' Link the zones to the actual components
DevEnvironment .. DevZone
GitHubNode .. GitHubCI
BuildSystemNode .. BuildSys
AWSCloudNode .. AWSInfra

'-------------------------- NOTES --------------------------

note right of PreCommitHooks
  Checks code formatting,
  linting, and runs tests
  before commit
end note

note right of GitHubActions
  Automated pipeline for testing,
  building and deploying the
  application to production
end note

note right of SecurityScan
  Scans for vulnerabilities,
  secrets, and security issues
end note

note right of EC2Cluster
  Auto-scaling group
  of EC2 instances
  running Docker containers
end note

note right of SecurityGroup
  Controls inbound/outbound
  traffic to EC2 instances
  and containers
end note

note right of CloudFront
  Global content delivery
  network for fast access
  to static assets
end note

note right of IAM
  Manages permissions and
  access control across
  AWS services
end note

'-------------------------- LEGEND --------------------------

legend
  |= Component |= Description |
  | Development Zone | Local dev environment with pre-commit hooks |
  | CI/CD Pipeline | Automated testing, building, and deployment |
  | Production Environment | AWS infrastructure running the application |
  | Security Components | Components that enforce security controls |
endlegend

@enduml
